package com.bookstore;

import com.bookstore.model.Book;
import com.bookstore.service.BookService;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.util.Assert;

@SpringBootTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class BookStoreApplicationTests {
    @Autowired
    private BookService bookService;
    private static Book second;
    private static Book Eneyida;

    static {
        second = new Book();
        second.setAuthor("Second");
        second.setTitle("Second");
        second.setPrice(BigDecimal.TWO);
        second.setIsbn("222-2-22-222222-2");
        second.setDescription("description 2");
        second.setCoverImage("images 2");

        Eneyida = new Book();
        Eneyida.setAuthor("Kotlyarevsky");
        Eneyida.setTitle("Eneyida");
        Eneyida.setPrice(BigDecimal.TEN);
        Eneyida.setIsbn("777-7-77-777777-7");
        Eneyida.setDescription("description 3");
        Eneyida.setCoverImage("images 3");
    }

    @Test
    @Order(1)
    void contextLoads() {
    }

    @Test
    @Order(2)
    void saveBook_Ok() {
        insertBooks();
    }

    @Test
    @Order(3)
    public void findAll_Ok() {
        List<Book> actualBooks = bookService.findAll();
        Assert.notNull(actualBooks, "Couldn't be null");
        Assert.isTrue(3 == actualBooks.size(),
                "Expected size 3 but actual: " + actualBooks.size());
    }

    private void insertBooks() {
        verifyCreateBookWorks(second, 2L);
        verifyCreateBookWorks(Eneyida, 3L);
    }

    private void verifyCreateBookWorks(Book book, Long expectedId) {
        Book actual = bookService.save(book);

        Assert.notNull(actual, "Couldn't be null");
        Assert.notNull(actual.getId(), "ID for book should be autogenerated");
        Assert.isTrue(Objects.equals(expectedId, actual.getId()),
                "Expected ID: " + expectedId + " but actual: " + actual.getId());
        Assert.isTrue(Objects.equals(book.getAuthor(), actual.getAuthor()),
                "Expected author: " + book.getAuthor()
                        + " but actual: " + actual.getAuthor());
        Assert.isTrue(Objects.equals(book.getTitle(), actual.getTitle()),
                "Expected title: " + book.getTitle()
                        + " but actual: " + actual.getTitle());
        Assert.isTrue(Objects.equals(book.getPrice(), actual.getPrice()),
                "Expected price: " + book.getPrice()
                        + " but actual: " + actual.getPrice());
        Assert.isTrue(Objects.equals(book.getIsbn(), actual.getIsbn()),
                "Expected isbn: " + book.getIsbn()
                        + " but actual: " + actual.getIsbn());
        Assert.isTrue(Objects.equals(book.getDescription(), actual.getDescription()),
                "Expected description: " + book.getDescription()
                        + " but actual: " + actual.getDescription());
        Assert.isTrue(Objects.equals(book.getCoverImage(), actual.getCoverImage()),
                "Expected coverImage: " + book.getCoverImage()
                        + " but actual: " + actual.getCoverImage());
    }
}
